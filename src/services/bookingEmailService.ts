import emailjs from '@emailjs/browser';
import { emailjsConfig, initEmailJS } from '@/config/emailjs';
import { Service, services } from '@/config/services';

interface BookingEmailData {
  name: string;
  email: string;
  phone: string;
  serviceIds: string[];
  date: Date;
  time: string;
  notes?: string;
}

export async function sendBookingEmails(data: BookingEmailData) {
  // Verifica as vari√°veis essenciais
  const essentialConfig = {
    publicKey: !!emailjsConfig.publicKey,
    serviceId: !!emailjsConfig.serviceId,
    userTemplateId: !!emailjsConfig.userTemplateId
  };

  const missingEssentials = Object.entries(essentialConfig)
    .filter(([_, value]) => !value)
    .map(([key]) => key);

  if (missingEssentials.length > 0) {
    console.error('‚ùå Falha na inicializa√ß√£o do EmailJS:', {
      error: 'Vari√°veis essenciais faltando',
      missingVars: missingEssentials,
      config: essentialConfig
    });
    throw new Error(`N√£o foi poss√≠vel inicializar o servi√ßo de email. Vari√°veis essenciais faltando: ${missingEssentials.join(', ')}`);
  }

  // Inicializa o EmailJS apenas com as configura√ß√µes essenciais
  if (!initEmailJS()) {
    throw new Error('N√£o foi poss√≠vel inicializar o servi√ßo de email');
  }

  // Busca os nomes dos servi√ßos e calcula o valor total
  const selectedServices = services
    .filter(service => data.serviceIds.includes(service.id))
    .map(service => service.name);

  // Valores n√£o s√£o calculados aqui pois n√£o temos pre√ßos definidos
  // As informa√ß√µes de pagamento s√£o fornecidas no template

  // Formata a data
  const formattedDate = new Intl.DateTimeFormat('pt-BR', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(data.date);

  // Template de dados para o cliente (usando as vari√°veis exatas do template HTML)
  const userTemplateData = {
    to_name: data.name,
    from_name: data.name,
    service: selectedServices.join(', '),
    service_name: selectedServices.join(', '),
    date: formattedDate,
    appointment_date: formattedDate,
    time: data.time,
    appointment_time: data.time,
    address: "Bei der Grodener Kirche 7, 27472 Cuxhaven, Alemanha",
    address_link: "https://maps.app.goo.gl/Ld8tZSGZGbVFGwqr7",
    payment_info: `Um Ihren Termin zu best√§tigen, ist eine Anzahlung von 20% des Gesamtwerts der Dienstleistung erforderlich. Die Zahlung muss innerhalb von 48 Stunden nach dieser Buchung erfolgen. F√ºr Termine mit weniger als 2 Tagen Vorlaufzeit muss die Zahlung am selben Tag erfolgen.`,
    payment_methods: "Sie k√∂nnen die Zahlung per Bank√ºberweisung, PayPal oder bar im Studio vornehmen.",
    contact_whatsapp: "+49 152 800 7814",
    appointment_status: "confirmado",
    message: `Ol√° ${data.name}!

Seu agendamento foi recebido com sucesso!

üìÖ DETALHES DO AGENDAMENTO:
‚Ä¢ Servi√ßo: ${selectedServices.join(', ')}
‚Ä¢ Data: ${formattedDate}
‚Ä¢ Hor√°rio: ${data.time}
‚Ä¢ Endere√ßo: Bei der Grodener Kirche 7, 27472 Cuxhaven, Alemanha

üí≥ INFORMA√á√ïES DE PAGAMENTO:
‚Ä¢ Sinal de 20% do valor total dos servi√ßos

Para confirmar seu agendamento, √© necess√°rio o pagamento de um sinal de 20% do valor total dos servi√ßos. O pagamento deve ser feito at√© 48 horas ap√≥s este agendamento. Para agendamentos com menos de 2 dias de anteced√™ncia, o pagamento deve ser feito no mesmo dia.

Voc√™ pode fazer o pagamento via transfer√™ncia banc√°ria, PayPal ou em dinheiro no est√∫dio.

‚ö†Ô∏è REGRAS IMPORTANTES:
‚Ä¢ Em caso de atraso superior a 15 minutos, o atendimento poder√° ser encurtado ou cancelado
‚Ä¢ O sinal n√£o √© reembols√°vel se o cancelamento ocorrer com menos de 24h de anteced√™ncia
‚Ä¢ Somente ap√≥s o pagamento do sinal o hor√°rio ser√° confirmado

üì± Para mais informa√ß√µes sobre o pagamento, entre em contato:
WhatsApp: +49 152 800 7814

Agradecemos pela confian√ßa!
Bruna Silva Aesthetic & Nails üíÖ`
  };

  // Template de dados para o admin (usando as vari√°veis exatas do template HTML)
  const adminTemplateData = {
    // Vari√°veis exatamente como aparecem no template HTML
    from_name: data.name,
    from_email: data.email,
    client_phone: data.phone,
    service: selectedServices.join(', '),
    date: formattedDate,
    time: data.time
  };

  try {
    // Envia email para o cliente
    const userResponse = await emailjs.send(
      emailjsConfig.serviceId,
      emailjsConfig.userTemplateId,
      {
        ...userTemplateData,
        to_email: data.email
      }
    );

    console.log('‚úÖ Email do cliente enviado com sucesso:', {
      userStatus: userResponse.status
    });

    // Tenta enviar email para o admin se as configura√ß√µes estiverem presentes
    if (emailjsConfig.adminTemplateId && emailjsConfig.adminEmail) {
      try {
        const adminResponse = await emailjs.send(
          emailjsConfig.serviceId,
          emailjsConfig.adminTemplateId,
          {
            ...adminTemplateData,
            to_email: emailjsConfig.adminEmail
          }
        );

        console.log('‚úÖ Email do admin enviado com sucesso:', {
          adminStatus: adminResponse.status
        });

        return {
          success: true,
          userEmailStatus: userResponse.status,
          adminEmailStatus: adminResponse.status
        };
      } catch (adminError) {
        console.warn('‚ö†Ô∏è N√£o foi poss√≠vel enviar o email para o admin:', adminError);
        // Continua mesmo se o email do admin falhar
        return {
          success: true,
          userEmailStatus: userResponse.status,
          adminEmailStatus: 'failed'
        };
      }
    } else {
      console.warn('‚ö†Ô∏è Email do admin n√£o enviado: configura√ß√£o incompleta');
      return {
        success: true,
        userEmailStatus: userResponse.status,
        adminEmailStatus: 'skipped'
      };
    }

  } catch (error) {
    console.error('‚ùå Erro ao enviar emails:', error);
    throw new Error('N√£o foi poss√≠vel enviar os emails de confirma√ß√£o');
  }
}